package com.robin3;

import java.util.ArrayList;
import java.util.List;

import cn.jsi.buaa.basic.DataGen;
import cn.jsi.buaa.basic.TreeNode;

public class PathSum2 {
	public List<List<Integer>> pathSum(TreeNode root, int sum) {
		List<List<Integer>> bres = dfs(root, sum);
		ArrayList<List<Integer>> reslist = new ArrayList<List<Integer>>();
		for (int i = bres.size() - 1; i >= 0; i--)
			reslist.add(bres.get(i));
		return reslist;
	}

	public ArrayList<List<Integer>> dfs(TreeNode node, int sum) {
		ArrayList<List<Integer>> reslist = new ArrayList<List<Integer>>();
		if (node == null)
			return reslist;
		if (node.left == null && node.right == null) {
			if (sum == node.val) {
				ArrayList<Integer> tlist = new ArrayList<Integer>();
				tlist.add(sum);
				reslist.add(tlist);
			}
			return reslist;
		}
		ArrayList<List<Integer>> l1 = dfs(node.left, sum - node.val);
		ArrayList<List<Integer>> l2 = dfs(node.left, sum - node.val);
		l1.addAll(l2);
		for (List<Integer> list : l1) {
			list.add(node.val);
		}
		return l1;
	}
	public static void main(String[] args) {
		TreeNode root=DataGen.gentTree
		PathSum2 ps=new PathSum2();
		List<List<Integer>> list=ps.pathSum(root, 1000);
		
	}

}
